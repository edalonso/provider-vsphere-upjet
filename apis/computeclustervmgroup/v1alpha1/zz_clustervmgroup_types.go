// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterVMGroupInitParameters struct {

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	// The unique name of the virtual machine group in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUIDs of the virtual machines in this
	// group.
	// The UUIDs of the virtual machines in this group.
	// +listType=set
	VirtualMachineIds []*string `json:"virtualMachineIds,omitempty" tf:"virtual_machine_ids,omitempty"`
}

type ClusterVMGroupObservation struct {

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	// The unique name of the virtual machine group in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUIDs of the virtual machines in this
	// group.
	// The UUIDs of the virtual machines in this group.
	// +listType=set
	VirtualMachineIds []*string `json:"virtualMachineIds,omitempty" tf:"virtual_machine_ids,omitempty"`
}

type ClusterVMGroupParameters struct {

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Optional
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The name of the VM group. This must be unique in the
	// cluster. Forces a new resource if changed.
	// The unique name of the virtual machine group in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUIDs of the virtual machines in this
	// group.
	// The UUIDs of the virtual machines in this group.
	// +kubebuilder:validation:Optional
	// +listType=set
	VirtualMachineIds []*string `json:"virtualMachineIds,omitempty" tf:"virtual_machine_ids,omitempty"`
}

// ClusterVMGroupSpec defines the desired state of ClusterVMGroup
type ClusterVMGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterVMGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterVMGroupInitParameters `json:"initProvider,omitempty"`
}

// ClusterVMGroupStatus defines the observed state of ClusterVMGroup.
type ClusterVMGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterVMGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClusterVMGroup is the Schema for the ClusterVMGroups API. Provides a VMware vSphere cluster virtual machine group. This can be used to manage groups of virtual machines for relevant rules in a cluster.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere-upjet}
type ClusterVMGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.computeClusterId) || (has(self.initProvider) && has(self.initProvider.computeClusterId))",message="spec.forProvider.computeClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ClusterVMGroupSpec   `json:"spec"`
	Status ClusterVMGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMGroupList contains a list of ClusterVMGroups
type ClusterVMGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterVMGroup `json:"items"`
}

// Repository type metadata.
var (
	ClusterVMGroup_Kind             = "ClusterVMGroup"
	ClusterVMGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterVMGroup_Kind}.String()
	ClusterVMGroup_KindAPIVersion   = ClusterVMGroup_Kind + "." + CRDGroupVersion.String()
	ClusterVMGroup_GroupVersionKind = CRDGroupVersion.WithKind(ClusterVMGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterVMGroup{}, &ClusterVMGroupList{})
}
