//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cluster) DeepCopyInto(out *Cluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *Cluster) DeepCopy() *Cluster {
	if in == nil {
		return nil
	}
	out := new(Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Cluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterInitParameters) DeepCopyInto(out *ClusterInitParameters) {
	*out = *in
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DpmThreshold != nil {
		in, out := &in.DpmThreshold, &out.DpmThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsAdvancedOptions != nil {
		in, out := &in.DrsAdvancedOptions, &out.DrsAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnablePredictiveDrs != nil {
		in, out := &in.DrsEnablePredictiveDrs, &out.DrsEnablePredictiveDrs
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnableVMOverrides != nil {
		in, out := &in.DrsEnableVMOverrides, &out.DrsEnableVMOverrides
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DrsMigrationThreshold != nil {
		in, out := &in.DrsMigrationThreshold, &out.DrsMigrationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsScaleDescendantsShares != nil {
		in, out := &in.DrsScaleDescendantsShares, &out.DrsScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForceEvacuateOnDestroy != nil {
		in, out := &in.ForceEvacuateOnDestroy, &out.ForceEvacuateOnDestroy
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlFailoverHostSystemIds != nil {
		in, out := &in.HaAdmissionControlFailoverHostSystemIds, &out.HaAdmissionControlFailoverHostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaAdmissionControlHostFailureTolerance != nil {
		in, out := &in.HaAdmissionControlHostFailureTolerance, &out.HaAdmissionControlHostFailureTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPerformanceTolerance != nil {
		in, out := &in.HaAdmissionControlPerformanceTolerance, &out.HaAdmissionControlPerformanceTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPolicy != nil {
		in, out := &in.HaAdmissionControlPolicy, &out.HaAdmissionControlPolicy
		*out = new(string)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageAutoCompute != nil {
		in, out := &in.HaAdmissionControlResourcePercentageAutoCompute, &out.HaAdmissionControlResourcePercentageAutoCompute
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageCPU != nil {
		in, out := &in.HaAdmissionControlResourcePercentageCPU, &out.HaAdmissionControlResourcePercentageCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageMemory != nil {
		in, out := &in.HaAdmissionControlResourcePercentageMemory, &out.HaAdmissionControlResourcePercentageMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitCPU != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitCPU, &out.HaAdmissionControlSlotPolicyExplicitCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitMemory != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitMemory, &out.HaAdmissionControlSlotPolicyExplicitMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyUseExplicitSize != nil {
		in, out := &in.HaAdmissionControlSlotPolicyUseExplicitSize, &out.HaAdmissionControlSlotPolicyUseExplicitSize
		*out = new(bool)
		**out = **in
	}
	if in.HaAdvancedOptions != nil {
		in, out := &in.HaAdvancedOptions, &out.HaAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaEnabled != nil {
		in, out := &in.HaEnabled, &out.HaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HaHeartbeatDatastoreIds != nil {
		in, out := &in.HaHeartbeatDatastoreIds, &out.HaHeartbeatDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaHeartbeatDatastorePolicy != nil {
		in, out := &in.HaHeartbeatDatastorePolicy, &out.HaHeartbeatDatastorePolicy
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostMonitoring != nil {
		in, out := &in.HaHostMonitoring, &out.HaHostMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMComponentProtection != nil {
		in, out := &in.HaVMComponentProtection, &out.HaVMComponentProtection
		*out = new(string)
		**out = **in
	}
	if in.HaVMDependencyRestartCondition != nil {
		in, out := &in.HaVMDependencyRestartCondition, &out.HaVMDependencyRestartCondition
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartAdditionalDelay != nil {
		in, out := &in.HaVMRestartAdditionalDelay, &out.HaVMRestartAdditionalDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostClusterExitTimeout != nil {
		in, out := &in.HostClusterExitTimeout, &out.HostClusterExitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostImage != nil {
		in, out := &in.HostImage, &out.HostImage
		*out = make([]HostImageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostManaged != nil {
		in, out := &in.HostManaged, &out.HostManaged
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaAutomationLevel != nil {
		in, out := &in.ProactiveHaAutomationLevel, &out.ProactiveHaAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaEnabled != nil {
		in, out := &in.ProactiveHaEnabled, &out.ProactiveHaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProactiveHaModerateRemediation != nil {
		in, out := &in.ProactiveHaModerateRemediation, &out.ProactiveHaModerateRemediation
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaProviderIds != nil {
		in, out := &in.ProactiveHaProviderIds, &out.ProactiveHaProviderIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProactiveHaSevereRemediation != nil {
		in, out := &in.ProactiveHaSevereRemediation, &out.ProactiveHaSevereRemediation
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanCompressionEnabled != nil {
		in, out := &in.VsanCompressionEnabled, &out.VsanCompressionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDedupEnabled != nil {
		in, out := &in.VsanDedupEnabled, &out.VsanDedupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDiskGroup != nil {
		in, out := &in.VsanDiskGroup, &out.VsanDiskGroup
		*out = make([]VsanDiskGroupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanDitEncryptionEnabled != nil {
		in, out := &in.VsanDitEncryptionEnabled, &out.VsanDitEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDitRekeyInterval != nil {
		in, out := &in.VsanDitRekeyInterval, &out.VsanDitRekeyInterval
		*out = new(float64)
		**out = **in
	}
	if in.VsanEnabled != nil {
		in, out := &in.VsanEnabled, &out.VsanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanEsaEnabled != nil {
		in, out := &in.VsanEsaEnabled, &out.VsanEsaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanFaultDomains != nil {
		in, out := &in.VsanFaultDomains, &out.VsanFaultDomains
		*out = make([]VsanFaultDomainsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanNetworkDiagnosticModeEnabled != nil {
		in, out := &in.VsanNetworkDiagnosticModeEnabled, &out.VsanNetworkDiagnosticModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanPerformanceEnabled != nil {
		in, out := &in.VsanPerformanceEnabled, &out.VsanPerformanceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanRemoteDatastoreIds != nil {
		in, out := &in.VsanRemoteDatastoreIds, &out.VsanRemoteDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanStretchedCluster != nil {
		in, out := &in.VsanStretchedCluster, &out.VsanStretchedCluster
		*out = make([]VsanStretchedClusterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanUnmapEnabled != nil {
		in, out := &in.VsanUnmapEnabled, &out.VsanUnmapEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanVerboseModeEnabled != nil {
		in, out := &in.VsanVerboseModeEnabled, &out.VsanVerboseModeEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterInitParameters.
func (in *ClusterInitParameters) DeepCopy() *ClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterList) DeepCopyInto(out *ClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ClusterList) DeepCopy() *ClusterList {
	if in == nil {
		return nil
	}
	out := new(ClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterObservation) DeepCopyInto(out *ClusterObservation) {
	*out = *in
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DpmThreshold != nil {
		in, out := &in.DpmThreshold, &out.DpmThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsAdvancedOptions != nil {
		in, out := &in.DrsAdvancedOptions, &out.DrsAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnablePredictiveDrs != nil {
		in, out := &in.DrsEnablePredictiveDrs, &out.DrsEnablePredictiveDrs
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnableVMOverrides != nil {
		in, out := &in.DrsEnableVMOverrides, &out.DrsEnableVMOverrides
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DrsMigrationThreshold != nil {
		in, out := &in.DrsMigrationThreshold, &out.DrsMigrationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsScaleDescendantsShares != nil {
		in, out := &in.DrsScaleDescendantsShares, &out.DrsScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForceEvacuateOnDestroy != nil {
		in, out := &in.ForceEvacuateOnDestroy, &out.ForceEvacuateOnDestroy
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlFailoverHostSystemIds != nil {
		in, out := &in.HaAdmissionControlFailoverHostSystemIds, &out.HaAdmissionControlFailoverHostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaAdmissionControlHostFailureTolerance != nil {
		in, out := &in.HaAdmissionControlHostFailureTolerance, &out.HaAdmissionControlHostFailureTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPerformanceTolerance != nil {
		in, out := &in.HaAdmissionControlPerformanceTolerance, &out.HaAdmissionControlPerformanceTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPolicy != nil {
		in, out := &in.HaAdmissionControlPolicy, &out.HaAdmissionControlPolicy
		*out = new(string)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageAutoCompute != nil {
		in, out := &in.HaAdmissionControlResourcePercentageAutoCompute, &out.HaAdmissionControlResourcePercentageAutoCompute
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageCPU != nil {
		in, out := &in.HaAdmissionControlResourcePercentageCPU, &out.HaAdmissionControlResourcePercentageCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageMemory != nil {
		in, out := &in.HaAdmissionControlResourcePercentageMemory, &out.HaAdmissionControlResourcePercentageMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitCPU != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitCPU, &out.HaAdmissionControlSlotPolicyExplicitCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitMemory != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitMemory, &out.HaAdmissionControlSlotPolicyExplicitMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyUseExplicitSize != nil {
		in, out := &in.HaAdmissionControlSlotPolicyUseExplicitSize, &out.HaAdmissionControlSlotPolicyUseExplicitSize
		*out = new(bool)
		**out = **in
	}
	if in.HaAdvancedOptions != nil {
		in, out := &in.HaAdvancedOptions, &out.HaAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaEnabled != nil {
		in, out := &in.HaEnabled, &out.HaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HaHeartbeatDatastoreIds != nil {
		in, out := &in.HaHeartbeatDatastoreIds, &out.HaHeartbeatDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaHeartbeatDatastorePolicy != nil {
		in, out := &in.HaHeartbeatDatastorePolicy, &out.HaHeartbeatDatastorePolicy
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostMonitoring != nil {
		in, out := &in.HaHostMonitoring, &out.HaHostMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMComponentProtection != nil {
		in, out := &in.HaVMComponentProtection, &out.HaVMComponentProtection
		*out = new(string)
		**out = **in
	}
	if in.HaVMDependencyRestartCondition != nil {
		in, out := &in.HaVMDependencyRestartCondition, &out.HaVMDependencyRestartCondition
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartAdditionalDelay != nil {
		in, out := &in.HaVMRestartAdditionalDelay, &out.HaVMRestartAdditionalDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostClusterExitTimeout != nil {
		in, out := &in.HostClusterExitTimeout, &out.HostClusterExitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostImage != nil {
		in, out := &in.HostImage, &out.HostImage
		*out = make([]HostImageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostManaged != nil {
		in, out := &in.HostManaged, &out.HostManaged
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaAutomationLevel != nil {
		in, out := &in.ProactiveHaAutomationLevel, &out.ProactiveHaAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaEnabled != nil {
		in, out := &in.ProactiveHaEnabled, &out.ProactiveHaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProactiveHaModerateRemediation != nil {
		in, out := &in.ProactiveHaModerateRemediation, &out.ProactiveHaModerateRemediation
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaProviderIds != nil {
		in, out := &in.ProactiveHaProviderIds, &out.ProactiveHaProviderIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProactiveHaSevereRemediation != nil {
		in, out := &in.ProactiveHaSevereRemediation, &out.ProactiveHaSevereRemediation
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolID != nil {
		in, out := &in.ResourcePoolID, &out.ResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanCompressionEnabled != nil {
		in, out := &in.VsanCompressionEnabled, &out.VsanCompressionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDedupEnabled != nil {
		in, out := &in.VsanDedupEnabled, &out.VsanDedupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDiskGroup != nil {
		in, out := &in.VsanDiskGroup, &out.VsanDiskGroup
		*out = make([]VsanDiskGroupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanDitEncryptionEnabled != nil {
		in, out := &in.VsanDitEncryptionEnabled, &out.VsanDitEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDitRekeyInterval != nil {
		in, out := &in.VsanDitRekeyInterval, &out.VsanDitRekeyInterval
		*out = new(float64)
		**out = **in
	}
	if in.VsanEnabled != nil {
		in, out := &in.VsanEnabled, &out.VsanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanEsaEnabled != nil {
		in, out := &in.VsanEsaEnabled, &out.VsanEsaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanFaultDomains != nil {
		in, out := &in.VsanFaultDomains, &out.VsanFaultDomains
		*out = make([]VsanFaultDomainsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanNetworkDiagnosticModeEnabled != nil {
		in, out := &in.VsanNetworkDiagnosticModeEnabled, &out.VsanNetworkDiagnosticModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanPerformanceEnabled != nil {
		in, out := &in.VsanPerformanceEnabled, &out.VsanPerformanceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanRemoteDatastoreIds != nil {
		in, out := &in.VsanRemoteDatastoreIds, &out.VsanRemoteDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanStretchedCluster != nil {
		in, out := &in.VsanStretchedCluster, &out.VsanStretchedCluster
		*out = make([]VsanStretchedClusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanUnmapEnabled != nil {
		in, out := &in.VsanUnmapEnabled, &out.VsanUnmapEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanVerboseModeEnabled != nil {
		in, out := &in.VsanVerboseModeEnabled, &out.VsanVerboseModeEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterObservation.
func (in *ClusterObservation) DeepCopy() *ClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterParameters) DeepCopyInto(out *ClusterParameters) {
	*out = *in
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DpmThreshold != nil {
		in, out := &in.DpmThreshold, &out.DpmThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsAdvancedOptions != nil {
		in, out := &in.DrsAdvancedOptions, &out.DrsAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnablePredictiveDrs != nil {
		in, out := &in.DrsEnablePredictiveDrs, &out.DrsEnablePredictiveDrs
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnableVMOverrides != nil {
		in, out := &in.DrsEnableVMOverrides, &out.DrsEnableVMOverrides
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DrsMigrationThreshold != nil {
		in, out := &in.DrsMigrationThreshold, &out.DrsMigrationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsScaleDescendantsShares != nil {
		in, out := &in.DrsScaleDescendantsShares, &out.DrsScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForceEvacuateOnDestroy != nil {
		in, out := &in.ForceEvacuateOnDestroy, &out.ForceEvacuateOnDestroy
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlFailoverHostSystemIds != nil {
		in, out := &in.HaAdmissionControlFailoverHostSystemIds, &out.HaAdmissionControlFailoverHostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaAdmissionControlHostFailureTolerance != nil {
		in, out := &in.HaAdmissionControlHostFailureTolerance, &out.HaAdmissionControlHostFailureTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPerformanceTolerance != nil {
		in, out := &in.HaAdmissionControlPerformanceTolerance, &out.HaAdmissionControlPerformanceTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPolicy != nil {
		in, out := &in.HaAdmissionControlPolicy, &out.HaAdmissionControlPolicy
		*out = new(string)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageAutoCompute != nil {
		in, out := &in.HaAdmissionControlResourcePercentageAutoCompute, &out.HaAdmissionControlResourcePercentageAutoCompute
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageCPU != nil {
		in, out := &in.HaAdmissionControlResourcePercentageCPU, &out.HaAdmissionControlResourcePercentageCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageMemory != nil {
		in, out := &in.HaAdmissionControlResourcePercentageMemory, &out.HaAdmissionControlResourcePercentageMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitCPU != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitCPU, &out.HaAdmissionControlSlotPolicyExplicitCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitMemory != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitMemory, &out.HaAdmissionControlSlotPolicyExplicitMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyUseExplicitSize != nil {
		in, out := &in.HaAdmissionControlSlotPolicyUseExplicitSize, &out.HaAdmissionControlSlotPolicyUseExplicitSize
		*out = new(bool)
		**out = **in
	}
	if in.HaAdvancedOptions != nil {
		in, out := &in.HaAdvancedOptions, &out.HaAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaEnabled != nil {
		in, out := &in.HaEnabled, &out.HaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HaHeartbeatDatastoreIds != nil {
		in, out := &in.HaHeartbeatDatastoreIds, &out.HaHeartbeatDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaHeartbeatDatastorePolicy != nil {
		in, out := &in.HaHeartbeatDatastorePolicy, &out.HaHeartbeatDatastorePolicy
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostMonitoring != nil {
		in, out := &in.HaHostMonitoring, &out.HaHostMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMComponentProtection != nil {
		in, out := &in.HaVMComponentProtection, &out.HaVMComponentProtection
		*out = new(string)
		**out = **in
	}
	if in.HaVMDependencyRestartCondition != nil {
		in, out := &in.HaVMDependencyRestartCondition, &out.HaVMDependencyRestartCondition
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartAdditionalDelay != nil {
		in, out := &in.HaVMRestartAdditionalDelay, &out.HaVMRestartAdditionalDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostClusterExitTimeout != nil {
		in, out := &in.HostClusterExitTimeout, &out.HostClusterExitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostImage != nil {
		in, out := &in.HostImage, &out.HostImage
		*out = make([]HostImageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostManaged != nil {
		in, out := &in.HostManaged, &out.HostManaged
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaAutomationLevel != nil {
		in, out := &in.ProactiveHaAutomationLevel, &out.ProactiveHaAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaEnabled != nil {
		in, out := &in.ProactiveHaEnabled, &out.ProactiveHaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProactiveHaModerateRemediation != nil {
		in, out := &in.ProactiveHaModerateRemediation, &out.ProactiveHaModerateRemediation
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaProviderIds != nil {
		in, out := &in.ProactiveHaProviderIds, &out.ProactiveHaProviderIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProactiveHaSevereRemediation != nil {
		in, out := &in.ProactiveHaSevereRemediation, &out.ProactiveHaSevereRemediation
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanCompressionEnabled != nil {
		in, out := &in.VsanCompressionEnabled, &out.VsanCompressionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDedupEnabled != nil {
		in, out := &in.VsanDedupEnabled, &out.VsanDedupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDiskGroup != nil {
		in, out := &in.VsanDiskGroup, &out.VsanDiskGroup
		*out = make([]VsanDiskGroupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanDitEncryptionEnabled != nil {
		in, out := &in.VsanDitEncryptionEnabled, &out.VsanDitEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDitRekeyInterval != nil {
		in, out := &in.VsanDitRekeyInterval, &out.VsanDitRekeyInterval
		*out = new(float64)
		**out = **in
	}
	if in.VsanEnabled != nil {
		in, out := &in.VsanEnabled, &out.VsanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanEsaEnabled != nil {
		in, out := &in.VsanEsaEnabled, &out.VsanEsaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanFaultDomains != nil {
		in, out := &in.VsanFaultDomains, &out.VsanFaultDomains
		*out = make([]VsanFaultDomainsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanNetworkDiagnosticModeEnabled != nil {
		in, out := &in.VsanNetworkDiagnosticModeEnabled, &out.VsanNetworkDiagnosticModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanPerformanceEnabled != nil {
		in, out := &in.VsanPerformanceEnabled, &out.VsanPerformanceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanRemoteDatastoreIds != nil {
		in, out := &in.VsanRemoteDatastoreIds, &out.VsanRemoteDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanStretchedCluster != nil {
		in, out := &in.VsanStretchedCluster, &out.VsanStretchedCluster
		*out = make([]VsanStretchedClusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanUnmapEnabled != nil {
		in, out := &in.VsanUnmapEnabled, &out.VsanUnmapEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanVerboseModeEnabled != nil {
		in, out := &in.VsanVerboseModeEnabled, &out.VsanVerboseModeEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterParameters.
func (in *ClusterParameters) DeepCopy() *ClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentInitParameters) DeepCopyInto(out *ComponentInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentInitParameters.
func (in *ComponentInitParameters) DeepCopy() *ComponentInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentObservation) DeepCopyInto(out *ComponentObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentObservation.
func (in *ComponentObservation) DeepCopy() *ComponentObservation {
	if in == nil {
		return nil
	}
	out := new(ComponentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentParameters) DeepCopyInto(out *ComponentParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentParameters.
func (in *ComponentParameters) DeepCopy() *ComponentParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FaultDomainInitParameters) DeepCopyInto(out *FaultDomainInitParameters) {
	*out = *in
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FaultDomainInitParameters.
func (in *FaultDomainInitParameters) DeepCopy() *FaultDomainInitParameters {
	if in == nil {
		return nil
	}
	out := new(FaultDomainInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FaultDomainObservation) DeepCopyInto(out *FaultDomainObservation) {
	*out = *in
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FaultDomainObservation.
func (in *FaultDomainObservation) DeepCopy() *FaultDomainObservation {
	if in == nil {
		return nil
	}
	out := new(FaultDomainObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FaultDomainParameters) DeepCopyInto(out *FaultDomainParameters) {
	*out = *in
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FaultDomainParameters.
func (in *FaultDomainParameters) DeepCopy() *FaultDomainParameters {
	if in == nil {
		return nil
	}
	out := new(FaultDomainParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostImageInitParameters) DeepCopyInto(out *HostImageInitParameters) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = make([]ComponentInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EsxVersion != nil {
		in, out := &in.EsxVersion, &out.EsxVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostImageInitParameters.
func (in *HostImageInitParameters) DeepCopy() *HostImageInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostImageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostImageObservation) DeepCopyInto(out *HostImageObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = make([]ComponentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EsxVersion != nil {
		in, out := &in.EsxVersion, &out.EsxVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostImageObservation.
func (in *HostImageObservation) DeepCopy() *HostImageObservation {
	if in == nil {
		return nil
	}
	out := new(HostImageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostImageParameters) DeepCopyInto(out *HostImageParameters) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = make([]ComponentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EsxVersion != nil {
		in, out := &in.EsxVersion, &out.EsxVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostImageParameters.
func (in *HostImageParameters) DeepCopy() *HostImageParameters {
	if in == nil {
		return nil
	}
	out := new(HostImageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanDiskGroupInitParameters) DeepCopyInto(out *VsanDiskGroupInitParameters) {
	*out = *in
	if in.Cache != nil {
		in, out := &in.Cache, &out.Cache
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanDiskGroupInitParameters.
func (in *VsanDiskGroupInitParameters) DeepCopy() *VsanDiskGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(VsanDiskGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanDiskGroupObservation) DeepCopyInto(out *VsanDiskGroupObservation) {
	*out = *in
	if in.Cache != nil {
		in, out := &in.Cache, &out.Cache
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanDiskGroupObservation.
func (in *VsanDiskGroupObservation) DeepCopy() *VsanDiskGroupObservation {
	if in == nil {
		return nil
	}
	out := new(VsanDiskGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanDiskGroupParameters) DeepCopyInto(out *VsanDiskGroupParameters) {
	*out = *in
	if in.Cache != nil {
		in, out := &in.Cache, &out.Cache
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanDiskGroupParameters.
func (in *VsanDiskGroupParameters) DeepCopy() *VsanDiskGroupParameters {
	if in == nil {
		return nil
	}
	out := new(VsanDiskGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanFaultDomainsInitParameters) DeepCopyInto(out *VsanFaultDomainsInitParameters) {
	*out = *in
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = make([]FaultDomainInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanFaultDomainsInitParameters.
func (in *VsanFaultDomainsInitParameters) DeepCopy() *VsanFaultDomainsInitParameters {
	if in == nil {
		return nil
	}
	out := new(VsanFaultDomainsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanFaultDomainsObservation) DeepCopyInto(out *VsanFaultDomainsObservation) {
	*out = *in
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = make([]FaultDomainObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanFaultDomainsObservation.
func (in *VsanFaultDomainsObservation) DeepCopy() *VsanFaultDomainsObservation {
	if in == nil {
		return nil
	}
	out := new(VsanFaultDomainsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanFaultDomainsParameters) DeepCopyInto(out *VsanFaultDomainsParameters) {
	*out = *in
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = make([]FaultDomainParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanFaultDomainsParameters.
func (in *VsanFaultDomainsParameters) DeepCopy() *VsanFaultDomainsParameters {
	if in == nil {
		return nil
	}
	out := new(VsanFaultDomainsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanStretchedClusterInitParameters) DeepCopyInto(out *VsanStretchedClusterInitParameters) {
	*out = *in
	if in.PreferredFaultDomainHostIds != nil {
		in, out := &in.PreferredFaultDomainHostIds, &out.PreferredFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredFaultDomainName != nil {
		in, out := &in.PreferredFaultDomainName, &out.PreferredFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.SecondaryFaultDomainHostIds != nil {
		in, out := &in.SecondaryFaultDomainHostIds, &out.SecondaryFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecondaryFaultDomainName != nil {
		in, out := &in.SecondaryFaultDomainName, &out.SecondaryFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.WitnessNode != nil {
		in, out := &in.WitnessNode, &out.WitnessNode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanStretchedClusterInitParameters.
func (in *VsanStretchedClusterInitParameters) DeepCopy() *VsanStretchedClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(VsanStretchedClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanStretchedClusterObservation) DeepCopyInto(out *VsanStretchedClusterObservation) {
	*out = *in
	if in.PreferredFaultDomainHostIds != nil {
		in, out := &in.PreferredFaultDomainHostIds, &out.PreferredFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredFaultDomainName != nil {
		in, out := &in.PreferredFaultDomainName, &out.PreferredFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.SecondaryFaultDomainHostIds != nil {
		in, out := &in.SecondaryFaultDomainHostIds, &out.SecondaryFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecondaryFaultDomainName != nil {
		in, out := &in.SecondaryFaultDomainName, &out.SecondaryFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.WitnessNode != nil {
		in, out := &in.WitnessNode, &out.WitnessNode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanStretchedClusterObservation.
func (in *VsanStretchedClusterObservation) DeepCopy() *VsanStretchedClusterObservation {
	if in == nil {
		return nil
	}
	out := new(VsanStretchedClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanStretchedClusterParameters) DeepCopyInto(out *VsanStretchedClusterParameters) {
	*out = *in
	if in.PreferredFaultDomainHostIds != nil {
		in, out := &in.PreferredFaultDomainHostIds, &out.PreferredFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredFaultDomainName != nil {
		in, out := &in.PreferredFaultDomainName, &out.PreferredFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.SecondaryFaultDomainHostIds != nil {
		in, out := &in.SecondaryFaultDomainHostIds, &out.SecondaryFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecondaryFaultDomainName != nil {
		in, out := &in.SecondaryFaultDomainName, &out.SecondaryFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.WitnessNode != nil {
		in, out := &in.WitnessNode, &out.WitnessNode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanStretchedClusterParameters.
func (in *VsanStretchedClusterParameters) DeepCopy() *VsanStretchedClusterParameters {
	if in == nil {
		return nil
	}
	out := new(VsanStretchedClusterParameters)
	in.DeepCopyInto(out)
	return out
}
