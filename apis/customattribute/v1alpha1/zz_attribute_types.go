// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributeInitParameters struct {

	// The object type that this attribute may be
	// applied to. If not set, the custom attribute may be applied to any object
	// type. For a full list, review the Managed Object Types. Forces a new resource if changed.
	// Object type for which the custom attribute is valid. If not specified, the attribute is valid for all managed object types.
	ManagedObjectType *string `json:"managedObjectType,omitempty" tf:"managed_object_type,omitempty"`
}

type AttributeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The object type that this attribute may be
	// applied to. If not set, the custom attribute may be applied to any object
	// type. For a full list, review the Managed Object Types. Forces a new resource if changed.
	// Object type for which the custom attribute is valid. If not specified, the attribute is valid for all managed object types.
	ManagedObjectType *string `json:"managedObjectType,omitempty" tf:"managed_object_type,omitempty"`
}

type AttributeParameters struct {

	// The object type that this attribute may be
	// applied to. If not set, the custom attribute may be applied to any object
	// type. For a full list, review the Managed Object Types. Forces a new resource if changed.
	// Object type for which the custom attribute is valid. If not specified, the attribute is valid for all managed object types.
	// +kubebuilder:validation:Optional
	ManagedObjectType *string `json:"managedObjectType,omitempty" tf:"managed_object_type,omitempty"`
}

// AttributeSpec defines the desired state of Attribute
type AttributeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AttributeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AttributeInitParameters `json:"initProvider,omitempty"`
}

// AttributeStatus defines the observed state of Attribute.
type AttributeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AttributeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Attribute is the Schema for the Attributes API. Provides a VMware vSphere custom attribute resource. This can be used to manage custom attributes in vSphere.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere-upjet}
type Attribute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AttributeSpec   `json:"spec"`
	Status            AttributeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttributeList contains a list of Attributes
type AttributeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Attribute `json:"items"`
}

// Repository type metadata.
var (
	Attribute_Kind             = "Attribute"
	Attribute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Attribute_Kind}.String()
	Attribute_KindAPIVersion   = Attribute_Kind + "." + CRDGroupVersion.String()
	Attribute_GroupVersionKind = CRDGroupVersion.WithKind(Attribute_Kind)
)

func init() {
	SchemeBuilder.Register(&Attribute{}, &AttributeList{})
}
